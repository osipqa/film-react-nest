services:
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: backend
    ports:
      - "3000:3000"
    networks:
      - backend_net  # Используем одну сеть для фронтенда и бэкенда
    env_file:
      - backend/.env
    depends_on:
      - postgres
    restart: unless-stopped

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: frontend
    ports:
      - "3001:80"
    networks:
      - backend_net  # Используем одну сеть для фронтенда и бэкенда
    env_file:
      - frontend/.env
    restart: unless-stopped

  postgres:
    image: postgres:14
    container_name: postgres
    networks:
      - backend_net
    env_file:
      - postgres/.env
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped

  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin
    env_file:
      - pgadmin/.env
    ports:
      - "8080:80"
    networks:
      - backend_net
    depends_on:
      - postgres
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    restart: unless-stopped

  nginx:
    image: nginx:alpine
    container_name: nginx
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf
    ports:
      - "80:80"
    networks:
      - backend_net  # Используем одну сеть для фронтенда и бэкенда
    depends_on:
      - frontend
      - backend
    restart: unless-stopped

volumes:
  postgres_data:
  pgadmin_data:

networks:
  backend_net:
    driver: bridge
